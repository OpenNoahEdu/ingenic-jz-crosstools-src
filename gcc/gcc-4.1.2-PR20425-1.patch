<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
 <title>/trunk/patches/gcc-4.1.2-PR20425-1.patch - CLFS Trac - Trac</title><link rel="start" href="/wiki" /><link rel="search" href="/search" /><link rel="help" href="/wiki/TracGuide" /><link rel="stylesheet" href="/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/browser.css" type="text/css" /><link rel="icon" href="/chrome/site/trac.ico" type="image/x-icon" /><link rel="shortcut icon" href="/chrome/site/trac.ico" type="image/x-icon" /><link rel="up" href="/browser/trunk/patches" title="Parent directory" /><link rel="alternate" href="/browser/trunk/patches/gcc-4.1.2-PR20425-1.patch?format=txt" title="Plain Text" type="text/plain" /><link rel="alternate" href="/browser/trunk/patches/gcc-4.1.2-PR20425-1.patch?format=raw" title="Original Format" type="text/x-diff; charset=iso-8859-15" /><style type="text/css">

@import url(/chrome/site/main.css);
#mainnav .active :link, #mainnav .active :visited {
 background: green;
}

</style>
 <script type="text/javascript" src="/chrome/common/js/trac.js"></script>
</head>
<body>



<div id="banner">

<div id="header"><a id="logo" href="http://trac.cross-lfs.org"><img src="/chrome/site/lfs-logo.png" width="192" height="75" alt="CLFS Trac" /></a><hr /></div>

<form id="search" action="/search" method="get">
 <div>
  <label for="proj-search">Search:</label>
  <input type="text" id="proj-search" name="q" size="10" accesskey="f" value="" />
  <input type="submit" value="Search" />
  <input type="hidden" name="wiki" value="on" />
  <input type="hidden" name="changeset" value="on" />
  <input type="hidden" name="ticket" value="on" />
 </div>
</form>



<div id="metanav" class="nav"><ul><li class="first"><a href="/login">Login</a></li><li><a href="/settings">Settings</a></li><li><a accesskey="6" href="/wiki/TracGuide">Help/Guide</a></li><li><a href="/about">About Trac</a></li><li class="last"><a href="/register">Register</a></li></ul></div>
</div>

<div id="mainnav" class="nav"><ul><li class="first"><a accesskey="1" href="/wiki">Wiki</a></li><li><a accesskey="2" href="/timeline">Timeline</a></li><li><a accesskey="3" href="/roadmap">Roadmap</a></li><li class="active"><a href="/browser">Browse Source</a></li><li><a href="/report">View Tickets</a></li><li class="last"><a accesskey="4" href="/search">Search</a></li></ul></div>
<div id="main">




<div id="ctxtnav" class="nav">
 <ul>
  <li class="first"><a href="/changeset/3449/trunk/patches/gcc-4.1.2-PR20425-1.patch">
   Last Change</a></li>
  <li class="last"><a href="/log/trunk/patches/gcc-4.1.2-PR20425-1.patch">
   Revision Log</a></li>
 </ul>
</div>


<div id="searchable">
<div id="content" class="browser">
 <h1><a class="first" title="Go to root directory" href="/browser">root</a><span class="sep">/</span><a title="View trunk" href="/browser/trunk">trunk</a><span class="sep">/</span><a title="View patches" href="/browser/trunk/patches">patches</a><span class="sep">/</span><a title="View gcc-4.1.2-PR20425-1.patch" href="/browser/trunk/patches/gcc-4.1.2-PR20425-1.patch">gcc-4.1.2-PR20425-1.patch</a></h1>

 <div id="jumprev">
  <form action="" method="get">
   <div>
    <label for="rev">View revision:</label>
    <input type="text" id="rev" name="rev" value="" size="4" />
   </div>
  </form>
 </div>

 

 
  <table id="info" summary="Revision info"><tr>
    <th scope="col">
     Revision <a href="/changeset/3449">3449</a>, 34.9 kB
     (checked in by jciccone, 4 days ago)
    </th></tr><tr>
    <td class="message"><p>
Added the gcc-PR20425 patch. <br />
</p>
</td>
   </tr>
  </table>
  <div id="preview">


<div class="diff"><ul class="entries"><li class="entry">
  <h2>gcc-4.1.0/gcc/config.build</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>90</th><th>90</th><td class="l"><span>&nbsp; &nbsp; build_install_headers_dir=install-headers-cpio</span>&nbsp;</td></tr><tr><th>91</th><th>91</th><td class="l"><span>&nbsp; &nbsp; ;;</span>&nbsp;</td></tr><tr><th>92</th><th>92</th><td class="l"><span>&nbsp; i[34567]86-sequent-ptx4* | i[34567]86-sequent-sysv4* )</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>93</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; build_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>94</th><th>93</th><td class="l"><span>&nbsp; &nbsp; build_install_headers_dir=install-headers-cpio</span>&nbsp;</td></tr><tr><th>95</th><th>94</th><td class="l"><span>&nbsp; &nbsp; ;;</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first"><th>96</th><th>&nbsp;</th><td class="l"><del>&nbsp; i[34567]86-*-solaris2*)</del>&nbsp;</td></tr><tr><th>97</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; build_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr><tr class="last"><th>98</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; ;;</del>&nbsp;</td></tr></tbody><tbody><tr><th>99</th><th>95</th><td class="l"><span>&nbsp; i[34567]86-*-sysv4*) </span>&nbsp;</td></tr><tr><th>100</th><th>96</th><td class="l"><span>&nbsp; &nbsp; # Intel x86 running system V r4</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>101</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; build_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>102</th><th>97</th><td class="l"><span>&nbsp; &nbsp; build_install_headers_dir=install-headers-cpio</span>&nbsp;</td></tr><tr><th>103</th><th>98</th><td class="l"><span>&nbsp; &nbsp; ;;</span>&nbsp;</td></tr><tr><th>104</th><th>99</th><td class="l"><span>&nbsp; i[34567]86-*-udk*) </span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gcc-4.1.0/gcc/config.gcc</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>994</th><th>994</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; then</span>&nbsp;</td></tr><tr><th>995</th><th>995</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tm_file=&#34;${tm_file} usegas.h&#34;</span>&nbsp;</td></tr><tr><th>996</th><th>996</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; fi</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>997</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>998</th><th>997</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; tm_file=&#34;${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h ptx4.h i386/ptx4-i.h&#34;</span>&nbsp;</td></tr><tr><th>999</th><th>998</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; tmake_file=t-svr4</span>&nbsp;</td></tr><tr><th>1000</th><th>999</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; extra_parts=&#34;crtbegin.o crtend.o&#34;</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>1125</th><th>1124</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; use_fixproto=yes</span>&nbsp;</td></tr><tr><th>1126</th><th>1125</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ;;</span>&nbsp;</td></tr><tr><th>1127</th><th>1126</th><td class="l"><span>i[34567]86-*-solaris2*)</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>1128</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>1129</th><th>1127</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; tm_file=&#34;${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h i386/sysv4.h sol2.h&#34;</span>&nbsp;</td></tr><tr><th>1130</th><th>1128</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; case ${target} in</span>&nbsp;</td></tr><tr><th>1131</th><th>1129</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; *-*-solaris2.[0-6] | *-*-solaris2.[0-6].*)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>1192</th><th>1190</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; use_fixproto=yes</span>&nbsp;</td></tr><tr><th>1193</th><th>1191</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;;;</span>&nbsp;</td></tr><tr><th>1194</th><th>1192</th><td class="l"><span>i[34567]86-*-sysv4*)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Intel 80386's running system V.4</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>1195</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>1196</th><th>1193</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; tm_file=&#34;${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h svr4.h i386/sysv4.h i386/sysv4-cpp.h&#34;</span>&nbsp;</td></tr><tr><th>1197</th><th>1194</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if test x$stabs = xyes</span>&nbsp;</td></tr><tr><th>1198</th><th>1195</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; then</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gcc-4.1.0/gcc/config.host</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>135</th><th>135</th><td class="l"><span>&nbsp; i370-*-opened* | i370-*-mvs* ) # IBM 360/370/390 Architecture</span>&nbsp;</td></tr><tr><th>136</th><th>136</th><td class="l"><span>&nbsp; &nbsp; host_xm_defines='FATAL_EXIT_CODE=12'</span>&nbsp;</td></tr><tr><th>137</th><th>137</th><td class="l"><span>&nbsp; &nbsp; ;;</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first"><th>138</th><th>&nbsp;</th><td class="l"><del>&nbsp; i[34567]86-sequent-ptx4*)</del>&nbsp;</td></tr><tr><th>139</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; host_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr><tr class="last"><th>140</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; ;;</del>&nbsp;</td></tr></tbody><tbody><tr><th>141</th><th>138</th><td class="l"><span>&nbsp; i[34567]86-*-solaris2*)</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>142</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; host_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr></tbody><tbody><tr><th>143</th><th>139</th><td class="l"><span>&nbsp; &nbsp; out_host_hook_obj=host-solaris.o</span>&nbsp;</td></tr><tr><th>144</th><th>140</th><td class="l"><span>&nbsp; &nbsp; host_xmake_file=x-solaris</span>&nbsp;</td></tr><tr><th>145</th><th>141</th><td class="l"><span>&nbsp; &nbsp; ;;</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first"><th>146</th><th>&nbsp;</th><td class="l"><del>&nbsp; i[34567]86-*-sysv4*) # Intel 80386's running System V Release 4</del>&nbsp;</td></tr><tr><th>147</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; host_xm_defines=&#34;SMALL_ARG_MAX&#34;</del>&nbsp;</td></tr><tr class="last"><th>148</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; ;;</del>&nbsp;</td></tr></tbody><tbody><tr><th>149</th><th>142</th><td class="l"><span>&nbsp; i[34567]86-pc-msdosdjgpp*)</span>&nbsp;</td></tr><tr><th>150</th><th>143</th><td class="l"><span>&nbsp; &nbsp; host_xm_file=i386/xm-djgpp.h</span>&nbsp;</td></tr><tr><th>151</th><th>144</th><td class="l"><span>&nbsp; &nbsp; host_exeext=.exe</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gcc-4.1.0/gcc/doc/hostconfig.texi</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>208</th><th>208</th><td class="l"><span>If defined, a C statement (sans semicolon) that performs host-dependent</span>&nbsp;</td></tr><tr><th>209</th><th>209</th><td class="l"><span>initialization when a compilation driver is being initialized.</span>&nbsp;</td></tr><tr><th>210</th><th>210</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first"><th>211</th><th>&nbsp;</th><td class="l"><del>@item SMALL_ARG_MAX</del>&nbsp;</td></tr><tr><th>212</th><th>&nbsp;</th><td class="l"><del>Define this macro if the host system has a small limit on the total</del>&nbsp;</td></tr><tr><th>213</th><th>&nbsp;</th><td class="l"><del>size of an argument vector.&nbsp; This causes the driver to take more care</del>&nbsp;</td></tr><tr><th>214</th><th>&nbsp;</th><td class="l"><del>not to pass unnecessary arguments to subprocesses.</del>&nbsp;</td></tr><tr class="last"><th>215</th><th>&nbsp;</th><td class="l"><del></del>&nbsp;</td></tr></tbody><tbody><tr><th>216</th><th>211</th><td class="l"><span>@item HOST_LONG_LONG_FORMAT</span>&nbsp;</td></tr><tr><th>217</th><th>212</th><td class="l"><span>If defined, the string used to indicate an argument of type @code{long</span>&nbsp;</td></tr><tr><th>218</th><th>213</th><td class="l"><span>long} to functions like @code{printf}.&nbsp; The default value is</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gcc-4.1.0/gcc/gcc.c</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>287</th><th>287</th><td class="l"><span>static void read_specs (const char *, int);</span>&nbsp;</td></tr><tr><th>288</th><th>288</th><td class="l"><span>static void set_spec (const char *, const char *);</span>&nbsp;</td></tr><tr><th>289</th><th>289</th><td class="l"><span>static struct compiler *lookup_compiler (const char *, size_t, const char *);</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>290</th><th>&nbsp;</th><td class="l">static char *build_search_list (struct path_prefix *, const char *, int);&nbsp;</td></tr><tr><th>291</th><th>&nbsp;</th><td class="l">static void putenv_from_prefixes (struct path_prefix *, const char *);&nbsp;</td></tr><tr><th>&nbsp;</th><th>290</th><td class="r">static char *build_search_list (const struct path_prefix *, const char *,&nbsp;</td></tr><tr><th>&nbsp;</th><th>291</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool, bool);&nbsp;</td></tr><tr><th>&nbsp;</th><th>292</th><td class="r">static void putenv_from_prefixes (const struct path_prefix *, const char *,&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>293</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool);&nbsp;</td></tr></tbody><tbody><tr><th>292</th><th>294</th><td class="l"><span>static int access_check (const char *, int);</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>293</th><th>&nbsp;</th><td class="l">static char *find_a_file (<del>struct path_prefix *, const char *, int, int</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>295</th><td class="r">static char *find_a_file (<ins>const struct path_prefix *, const char *, int, bool</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>294</th><th>296</th><td class="l"><span>static void add_prefix (struct path_prefix *, const char *, const char *,</span>&nbsp;</td></tr><tr><th>295</th><th>297</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int, int, int);</span>&nbsp;</td></tr><tr><th>296</th><th>298</th><td class="l"><span>static void add_sysrooted_prefix (struct path_prefix *, const char *,</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>313</th><th>315</th><td class="l"><span>static const char *handle_spec_function (const char *);</span>&nbsp;</td></tr><tr><th>314</th><th>316</th><td class="l"><span>static char *save_string (const char *, int);</span>&nbsp;</td></tr><tr><th>315</th><th>317</th><td class="l"><span>static void set_collect_gcc_options (void);</span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first last"><th>316</th><th>&nbsp;</th><td class="l"><del>static void do_spec_path (struct prefix_list *, const char *, int, int, int, const char *, const char *);</del>&nbsp;</td></tr></tbody><tbody><tr><th>317</th><th>318</th><td class="l"><span>static int do_spec_1 (const char *, int, const char *);</span>&nbsp;</td></tr><tr><th>318</th><th>319</th><td class="l"><span>static int do_spec_2 (const char *);</span>&nbsp;</td></tr><tr><th>319</th><th>320</th><td class="l"><span>static void do_option_spec (const char *, const char *);</span>&nbsp;</td></tr><tr><th>320</th><th>321</th><td class="l"><span>static void do_self_spec (const char *);</span>&nbsp;</td></tr><tr><th>321</th><th>322</th><td class="l"><span>static const char *find_file (const char *);</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>322</th><th>&nbsp;</th><td class="l">static int is_directory (const char *, <del>const char *, int</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>323</th><td class="r">static int is_directory (const char *, <ins>bool</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>323</th><th>324</th><td class="l"><span>static const char *validate_switches (const char *);</span>&nbsp;</td></tr><tr><th>324</th><th>325</th><td class="l"><span>static void validate_all_switches (void);</span>&nbsp;</td></tr><tr><th>325</th><th>326</th><td class="l"><span>static inline void validate_switches_from_spec (const char *);</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2036</th><th>2037</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(long) (p1 - buffer + 1));</span>&nbsp;</td></tr><tr><th>2037</th><th>2038</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2038</th><th>2039</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p[-2] = '\0';</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2039</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_filename = find_a_file (&amp;startfile_prefixes, p1, R_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2040</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_filename = find_a_file (&amp;startfile_prefixes, p1, R_OK, <ins>true</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>2040</th><th>2041</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read_specs (new_filename ? new_filename : p1, FALSE);</span>&nbsp;</td></tr><tr><th>2041</th><th>2042</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue;</span>&nbsp;</td></tr><tr><th>2042</th><th>2043</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2055</th><th>2056</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(long) (p1 - buffer + 1));</span>&nbsp;</td></tr><tr><th>2056</th><th>2057</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2057</th><th>2058</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p[-2] = '\0';</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2058</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_filename = find_a_file (&amp;startfile_prefixes, p1, R_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2059</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; new_filename = find_a_file (&amp;startfile_prefixes, p1, R_OK, <ins>true</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>2059</th><th>2060</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (new_filename)</span>&nbsp;</td></tr><tr><th>2060</th><th>2061</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read_specs (new_filename, FALSE);</span>&nbsp;</td></tr><tr><th>2061</th><th>2062</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if (verbose_flag)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2352</th><th>2353</th><td class="l"><span>&nbsp; failure_delete_queue = 0;</span>&nbsp;</td></tr><tr><th>2353</th><th>2354</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>2354</th><th>2355</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2355</th><th>&nbsp;</th><td class="l">/* Build a list of search directories from PATHS.&nbsp;</td></tr><tr><th>2356</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;PREFIX is a string to prepend to the list.&nbsp;</td></tr><tr><th>2357</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;If CHECK_DIR_P is nonzero we ensure the directory exists.&nbsp;</td></tr><tr><th>2358</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;This is used mostly by putenv_from_prefixes so we use `collect_obstack'.&nbsp;</td></tr><tr><th>2359</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;It is also used by the --print-search-dirs flag.&nbsp; */&nbsp;</td></tr><tr><th>2360</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2361</th><th>&nbsp;</th><td class="l">static char *&nbsp;</td></tr><tr><th>2362</th><th>&nbsp;</th><td class="l">build_search_list (struct path_prefix *paths, const char *prefix,&nbsp;</td></tr><tr><th>2363</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int check_dir_p)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2356</th><td class="r">/* Call CALLBACK for each path in PATHS, breaking out early if CALLBACK&nbsp;</td></tr><tr><th>&nbsp;</th><th>2357</th><td class="r">&nbsp; &nbsp;returns non-NULL.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2358</th><td class="r">&nbsp; &nbsp;If DO_MULTI is true iterate over the paths twice, first with multilib&nbsp;</td></tr><tr><th>&nbsp;</th><th>2359</th><td class="r">&nbsp; &nbsp;suffix then without, otherwise iterate over the paths once without&nbsp;</td></tr><tr><th>&nbsp;</th><th>2360</th><td class="r">&nbsp; &nbsp;adding a multilib suffix.&nbsp; When DO_MULTI is true, some attempt is made&nbsp;</td></tr><tr><th>&nbsp;</th><th>2361</th><td class="r">&nbsp; &nbsp;to avoid visiting the same path twice, but we could do better.&nbsp; For&nbsp;</td></tr><tr><th>&nbsp;</th><th>2362</th><td class="r">&nbsp; &nbsp;instance, /usr/lib/../lib is considered different from /usr/lib.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2363</th><td class="r">&nbsp; &nbsp;At least EXTRA_SPACE chars past the end of the path passed to&nbsp;</td></tr><tr><th>&nbsp;</th><th>2364</th><td class="r">&nbsp; &nbsp;CALLBACK are available for use by the callback.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2365</th><td class="r">&nbsp; &nbsp;CALLBACK_INFO allows extra parameters to be passed to CALLBACK.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2366</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2367</th><td class="r">&nbsp; &nbsp;Returns the value returned by CALLBACK.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>2368</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2369</th><td class="r">static void *&nbsp;</td></tr><tr><th>&nbsp;</th><th>2370</th><td class="r">for_each_path (const struct path_prefix *paths,&nbsp;</td></tr><tr><th>&nbsp;</th><th>2371</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bool do_multi,&nbsp;</td></tr><tr><th>&nbsp;</th><th>2372</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;size_t extra_space,&nbsp;</td></tr><tr><th>&nbsp;</th><th>2373</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;void *(*callback) (char *, void *),&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2374</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;void *callback_info)&nbsp;</td></tr></tbody><tbody><tr><th>2364</th><th>2375</th><td class="l"><span>{</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2365</th><th>&nbsp;</th><td class="l">&nbsp; int suffix_len = (machine_suffix) ? strlen (machine_suffix) : 0;&nbsp;</td></tr><tr><th>2366</th><th>&nbsp;</th><td class="l">&nbsp; int just_suffix_len&nbsp;</td></tr><tr><th>2367</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; = (just_machine_suffix) ? strlen (just_machine_suffix) : 0;&nbsp;</td></tr><tr><th>2368</th><th>&nbsp;</th><td class="l">&nbsp; int first_time = TRUE;&nbsp;</td></tr><tr><th>2369</th><th>&nbsp;</th><td class="l">&nbsp; struct prefix_list *pprefix;&nbsp;</td></tr><tr><th>2370</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2371</th><th>&nbsp;</th><td class="l">&nbsp; obstack_grow (&amp;collect_obstack, prefix, strlen (prefix));&nbsp;</td></tr><tr><th>2372</th><th>&nbsp;</th><td class="l">&nbsp; obstack_1grow (&amp;collect_obstack, '=');&nbsp;</td></tr><tr><th>&nbsp;</th><th>2376</th><td class="r">&nbsp; struct prefix_list *pl;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2377</th><td class="r">&nbsp; const char *multi_dir = NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2378</th><td class="r">&nbsp; const char *multi_os_dir = NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2379</th><td class="r">&nbsp; const char *multi_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2380</th><td class="r">&nbsp; const char *just_multi_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2381</th><td class="r">&nbsp; char *path = NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2382</th><td class="r">&nbsp; void *ret = NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2383</th><td class="r">&nbsp; bool skip_multi_dir = false;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2384</th><td class="r">&nbsp; bool skip_multi_os_dir = false;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2385</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2386</th><td class="r">&nbsp; multi_suffix = machine_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2387</th><td class="r">&nbsp; just_multi_suffix = just_machine_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2388</th><td class="r">&nbsp; if (do_multi &amp;&amp; multilib_dir &amp;&amp; strcmp (multilib_dir, &#34;.&#34;) != 0)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2389</th><td class="r">&nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2390</th><td class="r">&nbsp; &nbsp; &nbsp; multi_dir = concat (multilib_dir, dir_separator_str, NULL);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2391</th><td class="r">&nbsp; &nbsp; &nbsp; multi_suffix = concat (multi_suffix, multi_dir, NULL);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2392</th><td class="r">&nbsp; &nbsp; &nbsp; just_multi_suffix = concat (just_multi_suffix, multi_dir, NULL);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2393</th><td class="r">&nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2394</th><td class="r">&nbsp; if (do_multi &amp;&amp; multilib_os_dir &amp;&amp; strcmp (multilib_os_dir, &#34;.&#34;) != 0)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2395</th><td class="r">&nbsp; &nbsp; multi_os_dir = concat (multilib_os_dir, dir_separator_str, NULL);&nbsp;</td></tr></tbody><tbody><tr><th>2373</th><th>2396</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2374</th><th>&nbsp;</th><td class="l">&nbsp; <del>for (pprefix = paths-&gt;plist; pprefix != 0; pprefix = pprefix-&gt;next</del>)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2397</th><td class="r">&nbsp; <ins>while (1</ins>)&nbsp;</td></tr></tbody><tbody><tr><th>2375</th><th>2398</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2376</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; int len = strlen (pprefix-&gt;prefix);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2399</th><td class="r">&nbsp; &nbsp; &nbsp; size_t multi_dir_len = 0;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2400</th><td class="r">&nbsp; &nbsp; &nbsp; size_t multi_os_dir_len = 0;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2401</th><td class="r">&nbsp; &nbsp; &nbsp; size_t suffix_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2402</th><td class="r">&nbsp; &nbsp; &nbsp; size_t just_suffix_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2403</th><td class="r">&nbsp; &nbsp; &nbsp; size_t len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2404</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2405</th><td class="r">&nbsp; &nbsp; &nbsp; if (multi_dir)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2406</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; multi_dir_len = strlen (multi_dir);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2407</th><td class="r">&nbsp; &nbsp; &nbsp; if (multi_os_dir)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2408</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; multi_os_dir_len = strlen (multi_os_dir);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2409</th><td class="r">&nbsp; &nbsp; &nbsp; suffix_len = strlen (multi_suffix);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2410</th><td class="r">&nbsp; &nbsp; &nbsp; just_suffix_len = strlen (just_multi_suffix);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2411</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2412</th><td class="r">&nbsp; &nbsp; &nbsp; if (path == NULL)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2413</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2414</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; len = paths-&gt;max_len + extra_space + 1;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2415</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (suffix_len &gt; multi_os_dir_len)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2416</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; len += suffix_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2417</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else&nbsp;</td></tr><tr><th>&nbsp;</th><th>2418</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; len += multi_os_dir_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2419</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path = xmalloc (len);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2420</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr></tbody><tbody><tr><th>2377</th><th>2421</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2378</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (machine_suffix&nbsp;</td></tr><tr><th>2379</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; (! check_dir_p&nbsp;</td></tr><tr><th>2380</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || is_directory (pprefix-&gt;prefix, machine_suffix, 0)))&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2422</th><td class="r">&nbsp; &nbsp; &nbsp; for (pl = paths-&gt;plist; pl != 0; pl = pl-&gt;next)&nbsp;</td></tr></tbody><tbody><tr><th>2381</th><th>2423</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2382</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <del>if (!first_time)</del>&nbsp;</td></tr><tr><th>2383</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <del>&nbsp; obstack_1grow (&amp;collect_obstack, PATH_SEPARATOR</del>);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2424</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <ins>len = strlen (pl-&gt;prefix);</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2425</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <ins>memcpy (path, pl-&gt;prefix, len</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>2384</th><th>2426</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2385</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first_time = FALSE;&nbsp;</td></tr><tr><th>2386</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_grow (&amp;collect_obstack, pprefix-&gt;prefix, len);&nbsp;</td></tr><tr><th>2387</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_grow (&amp;collect_obstack, machine_suffix, suffix_len);&nbsp;</td></tr><tr><th>2388</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2427</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Look first in MACHINE/VERSION subdirectory.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>2428</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!skip_multi_dir)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2429</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2430</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcpy (path + len, multi_suffix, suffix_len + 1);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2431</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = callback (path, callback_info);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2432</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ret)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2433</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2434</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr></tbody><tbody><tr><th>2389</th><th>2435</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2390</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (just_machine_suffix&nbsp;</td></tr><tr><th>2391</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; pprefix-&gt;require_machine_suffix == 2&nbsp;</td></tr><tr><th>2392</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; (! check_dir_p&nbsp;</td></tr><tr><th>2393</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || is_directory (pprefix-&gt;prefix, just_machine_suffix, 0)))&nbsp;</td></tr><tr><th>2394</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2395</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (! first_time)&nbsp;</td></tr><tr><th>2396</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_1grow (&amp;collect_obstack, PATH_SEPARATOR);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2436</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Some paths are tried with just the machine (ie. target)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2437</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subdir.&nbsp; This is used for finding as, ld, etc.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>2438</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!skip_multi_dir&nbsp;</td></tr><tr><th>&nbsp;</th><th>2439</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; pl-&gt;require_machine_suffix == 2)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2440</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2441</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcpy (path + len, just_multi_suffix, just_suffix_len + 1);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2442</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = callback (path, callback_info);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2443</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ret)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2444</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2445</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2446</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2447</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Now try the base path.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>2448</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!pl-&gt;require_machine_suffix&nbsp;</td></tr><tr><th>&nbsp;</th><th>2449</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; !(pl-&gt;os_multilib ? skip_multi_os_dir : skip_multi_dir))&nbsp;</td></tr><tr><th>&nbsp;</th><th>2450</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2451</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char *this_multi;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2452</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; size_t this_multi_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2453</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2454</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (pl-&gt;os_multilib)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2455</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2456</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this_multi = multi_os_dir;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2457</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this_multi_len = multi_os_dir_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2458</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2459</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else&nbsp;</td></tr><tr><th>&nbsp;</th><th>2460</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2461</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this_multi = multi_dir;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2462</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this_multi_len = multi_dir_len;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2463</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr></tbody><tbody><tr><th>2397</th><th>2464</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2398</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first_time = FALSE;&nbsp;</td></tr><tr><th>2399</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_grow (&amp;collect_obstack, pprefix-&gt;prefix, len);&nbsp;</td></tr><tr><th>2400</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_grow (&amp;collect_obstack, just_machine_suffix,&nbsp;</td></tr><tr><th>2401</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; just_suffix_len);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2465</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (this_multi_len)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2466</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcpy (path + len, this_multi, this_multi_len + 1);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2467</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else&nbsp;</td></tr><tr><th>&nbsp;</th><th>2468</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path[len] = '\0';&nbsp;</td></tr><tr><th>&nbsp;</th><th>2469</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>2470</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = callback (path, callback_info);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2471</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ret)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2472</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2473</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr></tbody><tbody><tr><th>2402</th><th>2474</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>2475</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (pl)</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2476</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; break;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>2403</th><th>2477</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2404</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (! pprefix-&gt;require_machine_suffix)&nbsp;</td></tr><tr><th>2405</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2406</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (! first_time)&nbsp;</td></tr><tr><th>2407</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_1grow (&amp;collect_obstack, PATH_SEPARATOR);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2478</th><td class="r">&nbsp; &nbsp; &nbsp; if (multi_dir == NULL &amp;&amp; multi_os_dir == NULL)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2479</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;</td></tr></tbody><tbody><tr><th>2408</th><th>2480</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2409</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first_time = FALSE;&nbsp;</td></tr><tr><th>2410</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obstack_grow (&amp;collect_obstack, pprefix-&gt;prefix, len);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2481</th><td class="r">&nbsp; &nbsp; &nbsp; /* Run through the paths again, this time without multilibs.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2482</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Don't repeat any we have already seen.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>2483</th><td class="r">&nbsp; &nbsp; &nbsp; if (multi_dir)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2484</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2485</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free ((char *) multi_dir);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2486</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multi_dir = NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2487</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free ((char *) multi_suffix);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2488</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multi_suffix = machine_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2489</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free ((char *) just_multi_suffix);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2490</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; just_multi_suffix = just_machine_suffix;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2491</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2492</th><td class="r">&nbsp; &nbsp; &nbsp; else&nbsp;</td></tr><tr><th>&nbsp;</th><th>2493</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; skip_multi_dir = true;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2494</th><td class="r">&nbsp; &nbsp; &nbsp; if (multi_os_dir)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2495</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>&nbsp;</th><th>2496</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free ((char *) multi_os_dir);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2497</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multi_os_dir = NULL;&nbsp;</td></tr></tbody><tbody><tr><th>2411</th><th>2498</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>2499</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2500</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; skip_multi_os_dir = true;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>2412</th><th>2501</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>2413</th><th>2502</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>2503</th><td class="r"><ins>&nbsp; if (multi_dir)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2504</th><td class="r"><ins>&nbsp; &nbsp; {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2505</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; free ((char *) multi_dir);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2506</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; free ((char *) multi_suffix);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2507</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; free ((char *) just_multi_suffix);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2508</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2509</th><td class="r"><ins>&nbsp; if (multi_os_dir)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2510</th><td class="r"><ins>&nbsp; &nbsp; free ((char *) multi_os_dir);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2511</th><td class="r"><ins>&nbsp; if (ret != path)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2512</th><td class="r"><ins>&nbsp; &nbsp; free (path);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2513</th><td class="r"><ins>&nbsp; return ret;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2514</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2515</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2516</th><td class="r"><ins>/* Callback for build_search_list.&nbsp; Adds path to obstack being built.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2517</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2518</th><td class="r"><ins>struct add_to_obstack_info {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2519</th><td class="r"><ins>&nbsp; struct obstack *ob;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2520</th><td class="r"><ins>&nbsp; bool check_dir;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2521</th><td class="r"><ins>&nbsp; bool first_time;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2522</th><td class="r"><ins>};</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2523</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2524</th><td class="r"><ins>static void *</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2525</th><td class="r"><ins>add_to_obstack (char *path, void *data)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2526</th><td class="r"><ins>{</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2527</th><td class="r"><ins>&nbsp; struct add_to_obstack_info *info = data;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2528</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2529</th><td class="r"><ins>&nbsp; if (info-&gt;check_dir &amp;&amp; !is_directory (path, false))</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2530</th><td class="r"><ins>&nbsp; &nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2531</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2532</th><td class="r"><ins>&nbsp; if (!info-&gt;first_time)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2533</th><td class="r"><ins>&nbsp; &nbsp; obstack_1grow (info-&gt;ob, PATH_SEPARATOR);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2534</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2535</th><td class="r"><ins>&nbsp; obstack_grow (info-&gt;ob, path, strlen (path));</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2536</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2537</th><td class="r"><ins>&nbsp; info-&gt;first_time = false;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2538</th><td class="r"><ins>&nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2539</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2540</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2541</th><td class="r"><ins>/* Build a list of search directories from PATHS.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2542</th><td class="r"><ins>&nbsp; &nbsp;PREFIX is a string to prepend to the list.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2543</th><td class="r"><ins>&nbsp; &nbsp;If CHECK_DIR_P is true we ensure the directory exists.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2544</th><td class="r"><ins>&nbsp; &nbsp;If DO_MULTI is true, multilib paths are output first, then</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2545</th><td class="r"><ins>&nbsp; &nbsp;non-multilib paths.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2546</th><td class="r"><ins>&nbsp; &nbsp;This is used mostly by putenv_from_prefixes so we use `collect_obstack'.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2547</th><td class="r"><ins>&nbsp; &nbsp;It is also used by the --print-search-dirs flag.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2548</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2549</th><td class="r"><ins>static char *</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2550</th><td class="r"><ins>build_search_list (const struct path_prefix *paths, const char *prefix,</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2551</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bool check_dir, bool do_multi)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2552</th><td class="r"><ins>{</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2553</th><td class="r"><ins>&nbsp; struct add_to_obstack_info info;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2554</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2555</th><td class="r"><ins>&nbsp; info.ob = &amp;collect_obstack;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2556</th><td class="r"><ins>&nbsp; info.check_dir = check_dir;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2557</th><td class="r"><ins>&nbsp; info.first_time = true;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2558</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2559</th><td class="r"><ins>&nbsp; obstack_grow (&amp;collect_obstack, prefix, strlen (prefix));</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2560</th><td class="r"><ins>&nbsp; obstack_1grow (&amp;collect_obstack, '=');</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2561</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2562</th><td class="r"><ins>&nbsp; for_each_path (paths, do_multi, 0, add_to_obstack, &amp;info);</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2563</th><td class="r"><ins></ins>&nbsp;</td></tr></tbody><tbody><tr><th>2414</th><th>2564</th><td class="l"><span>&nbsp; obstack_1grow (&amp;collect_obstack, '\0');</span>&nbsp;</td></tr><tr><th>2415</th><th>2565</th><td class="l"><span>&nbsp; return XOBFINISH (&amp;collect_obstack, char *);</span>&nbsp;</td></tr><tr><th>2416</th><th>2566</th><td class="l"><span>}</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2419</th><th>2569</th><td class="l"><span>&nbsp; &nbsp;for collect.&nbsp; */</span>&nbsp;</td></tr><tr><th>2420</th><th>2570</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2421</th><th>2571</th><td class="l"><span>static void</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2422</th><th>&nbsp;</th><td class="l">putenv_from_prefixes (struct path_prefix *paths, const char *env_var)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2572</th><td class="r">putenv_from_prefixes (const struct path_prefix *paths, const char *env_var,&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2573</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bool do_multi)&nbsp;</td></tr></tbody><tbody><tr><th>2423</th><th>2574</th><td class="l"><span>{</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2424</th><th>&nbsp;</th><td class="l">&nbsp; putenv (build_search_list (paths, env_var, <del>1</del>));&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2575</th><td class="r">&nbsp; putenv (build_search_list (paths, env_var, <ins>true, do_multi</ins>));&nbsp;</td></tr></tbody><tbody><tr><th>2425</th><th>2576</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>2426</th><th>2577</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2427</th><th>2578</th><td class="l"><span>/* Check whether NAME can be accessed in MODE.&nbsp; This is like access,</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2442</th><th>2593</th><td class="l"><span>&nbsp; return access (name, mode);</span>&nbsp;</td></tr><tr><th>2443</th><th>2594</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>2444</th><th>2595</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>2596</th><td class="r"><ins>/* Callback for find_a_file.&nbsp; Appends the file name to the directory</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2597</th><td class="r"><ins>&nbsp; &nbsp;path.&nbsp; If the resulting file exists in the right mode, return the</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2598</th><td class="r"><ins>&nbsp; &nbsp;full pathname to the file.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2599</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2600</th><td class="r"><ins>struct file_at_path_info {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2601</th><td class="r"><ins>&nbsp; const char *name;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2602</th><td class="r"><ins>&nbsp; const char *suffix;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2603</th><td class="r"><ins>&nbsp; int name_len;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2604</th><td class="r"><ins>&nbsp; int suffix_len;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2605</th><td class="r"><ins>&nbsp; int mode;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2606</th><td class="r"><ins>};</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2607</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2608</th><td class="r"><ins>static void *</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2609</th><td class="r"><ins>file_at_path (char *path, void *data)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2610</th><td class="r"><ins>{</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2611</th><td class="r"><ins>&nbsp; struct file_at_path_info *info = data;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2612</th><td class="r"><ins>&nbsp; size_t len = strlen (path);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2613</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2614</th><td class="r"><ins>&nbsp; memcpy (path + len, info-&gt;name, info-&gt;name_len);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2615</th><td class="r"><ins>&nbsp; len += info-&gt;name_len;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2616</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2617</th><td class="r"><ins>&nbsp; /* Some systems have a suffix for executable files.</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2618</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;So try appending that first.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2619</th><td class="r"><ins>&nbsp; if (info-&gt;suffix_len)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2620</th><td class="r"><ins>&nbsp; &nbsp; {</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2621</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; memcpy (path + len, info-&gt;suffix, info-&gt;suffix_len + 1);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2622</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (access_check (path, info-&gt;mode) == 0)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2623</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; return path;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2624</th><td class="r"><ins>&nbsp; &nbsp; }</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2625</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2626</th><td class="r"><ins>&nbsp; path[len] = '\0';</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2627</th><td class="r"><ins>&nbsp; if (access_check (path, info-&gt;mode) == 0)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2628</th><td class="r"><ins>&nbsp; &nbsp; return path;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2629</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2630</th><td class="r"><ins>&nbsp; return NULL;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>2631</th><td class="r"><ins>}</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2632</th><td class="r"><ins></ins>&nbsp;</td></tr></tbody><tbody><tr><th>2445</th><th>2633</th><td class="l"><span>/* Search for NAME using the prefix list PREFIXES.&nbsp; MODE is passed to</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2446</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;access to check permissions.&nbsp;</td></tr><tr><th>&nbsp;</th><th>2634</th><td class="r">&nbsp; &nbsp;access to check permissions.&nbsp; If DO_MULTI is true, search multilib&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2635</th><td class="r">&nbsp; &nbsp;paths then non-multilib paths, otherwise do not search multilib paths.&nbsp;</td></tr></tbody><tbody><tr><th>2447</th><th>2636</th><td class="l"><span>&nbsp; &nbsp;Return 0 if not found, otherwise return its name, allocated with malloc.&nbsp; */</span>&nbsp;</td></tr><tr><th>2448</th><th>2637</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2449</th><th>2638</th><td class="l"><span>static char *</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2450</th><th>&nbsp;</th><td class="l">find_a_file (<del></del>struct path_prefix *pprefix, const char *name, int mode,&nbsp;</td></tr><tr><th>2451</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<del>int multilib</del>)&nbsp;</td></tr><tr><th>&nbsp;</th><th>2639</th><td class="r">find_a_file (<ins>const </ins>struct path_prefix *pprefix, const char *name, int mode,&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2640</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<ins>bool do_multi</ins>)&nbsp;</td></tr></tbody><tbody><tr><th>2452</th><th>2641</th><td class="l"><span>{</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2453</th><th>&nbsp;</th><td class="l">&nbsp; char *temp;&nbsp;</td></tr><tr><th>2454</th><th>&nbsp;</th><td class="l">&nbsp; const char *const file_suffix =&nbsp;</td></tr><tr><th>2455</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; ((mode &amp; X_OK) != 0 ? HOST_EXECUTABLE_SUFFIX : &#34;&#34;);&nbsp;</td></tr><tr><th>2456</th><th>&nbsp;</th><td class="l">&nbsp; struct prefix_list *pl;&nbsp;</td></tr><tr><th>2457</th><th>&nbsp;</th><td class="l">&nbsp; int len = pprefix-&gt;max_len + strlen (name) + strlen (file_suffix) + 1;&nbsp;</td></tr><tr><th>2458</th><th>&nbsp;</th><td class="l">&nbsp; const char *multilib_name, *multilib_os_name;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2642</th><td class="r">&nbsp; struct file_at_path_info info;&nbsp;</td></tr></tbody><tbody><tr><th>2459</th><th>2643</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2460</th><th>2644</th><td class="l"><span>#ifdef DEFAULT_ASSEMBLER</span>&nbsp;</td></tr><tr><th>2461</th><th>2645</th><td class="l"><span>&nbsp; if (! strcmp (name, &#34;as&#34;) &amp;&amp; access (DEFAULT_ASSEMBLER, mode) == 0)</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2467</th><th>2651</th><td class="l"><span>&nbsp; &nbsp; return xstrdup (DEFAULT_LINKER);</span>&nbsp;</td></tr><tr><th>2468</th><th>2652</th><td class="l"><span>#endif</span>&nbsp;</td></tr><tr><th>2469</th><th>2653</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="rem"><tr class="first"><th>2470</th><th>&nbsp;</th><td class="l"><del>&nbsp; if (machine_suffix)</del>&nbsp;</td></tr><tr><th>2471</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; len += strlen (machine_suffix);</del>&nbsp;</td></tr><tr><th>2472</th><th>&nbsp;</th><td class="l"><del></del>&nbsp;</td></tr><tr><th>2473</th><th>&nbsp;</th><td class="l"><del>&nbsp; multilib_name = name;</del>&nbsp;</td></tr><tr><th>2474</th><th>&nbsp;</th><td class="l"><del>&nbsp; multilib_os_name = name;</del>&nbsp;</td></tr><tr><th>2475</th><th>&nbsp;</th><td class="l"><del>&nbsp; if (multilib &amp;&amp; multilib_os_dir)</del>&nbsp;</td></tr><tr><th>2476</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; {</del>&nbsp;</td></tr><tr><th>2477</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; int len1 = multilib_dir ? strlen (multilib_dir) + 1 : 0;</del>&nbsp;</td></tr><tr><th>2478</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; int len2 = strlen (multilib_os_dir) + 1;</del>&nbsp;</td></tr><tr><th>2479</th><th>&nbsp;</th><td class="l"><del></del>&nbsp;</td></tr><tr><th>2480</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; len += len1 &gt; len2 ? len1 : len2;</del>&nbsp;</td></tr><tr><th>2481</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; if (multilib_dir)</del>&nbsp;</td></tr><tr><th>2482</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; multilib_name = ACONCAT ((multilib_dir, dir_separator_str, name,</del>&nbsp;</td></tr><tr><th>2483</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NULL));</del>&nbsp;</td></tr><tr><th>2484</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; if (strcmp (multilib_os_dir, &#34;.&#34;) != 0)</del>&nbsp;</td></tr><tr><th>2485</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; multilib_os_name = ACONCAT ((multilib_os_dir, dir_separator_str, name,</del>&nbsp;</td></tr><tr><th>2486</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NULL));</del>&nbsp;</td></tr><tr><th>2487</th><th>&nbsp;</th><td class="l"><del>&nbsp; &nbsp; }</del>&nbsp;</td></tr><tr><th>2488</th><th>&nbsp;</th><td class="l"><del></del>&nbsp;</td></tr><tr><th>2489</th><th>&nbsp;</th><td class="l"><del>&nbsp; temp = xmalloc (len);</del>&nbsp;</td></tr><tr class="last"><th>2490</th><th>&nbsp;</th><td class="l"><del></del>&nbsp;</td></tr></tbody><tbody><tr><th>2491</th><th>2654</th><td class="l"><span>&nbsp; /* Determine the filename to execute (special case for absolute paths).&nbsp; */</span>&nbsp;</td></tr><tr><th>2492</th><th>2655</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2493</th><th>2656</th><td class="l"><span>&nbsp; if (IS_ABSOLUTE_PATH (name))</span>&nbsp;</td></tr><tr><th>2494</th><th>2657</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>2495</th><th>2658</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (access (name, mode) == 0)</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2496</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2497</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, name);&nbsp;</td></tr><tr><th>2498</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2499</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2500</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2501</th><th>&nbsp;</th><td class="l">&nbsp; else&nbsp;</td></tr><tr><th>2502</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; for (pl = pprefix-&gt;plist; pl; pl = pl-&gt;next)&nbsp;</td></tr><tr><th>2503</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2504</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; const char *this_name&nbsp;</td></tr><tr><th>2505</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = pl-&gt;os_multilib ? multilib_os_name : multilib_name;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2659</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; return xstrdup (name);&nbsp;</td></tr></tbody><tbody><tr><th>2506</th><th>2660</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2507</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; if (machine_suffix)&nbsp;</td></tr><tr><th>2508</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2509</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Some systems have a suffix for executable files.&nbsp;</td></tr><tr><th>2510</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;So try appending that first.&nbsp; */&nbsp;</td></tr><tr><th>2511</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file_suffix[0] != 0)&nbsp;</td></tr><tr><th>2512</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2513</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2514</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, machine_suffix);&nbsp;</td></tr><tr><th>2515</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, multilib_name);&nbsp;</td></tr><tr><th>2516</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, file_suffix);&nbsp;</td></tr><tr><th>2517</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2518</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2519</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2520</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2521</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Now try just the multilib_name.&nbsp; */&nbsp;</td></tr><tr><th>2522</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2523</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, machine_suffix);&nbsp;</td></tr><tr><th>2524</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, multilib_name);&nbsp;</td></tr><tr><th>2525</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2526</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2527</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2528</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2529</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; /* Certain prefixes are tried with just the machine type,&nbsp;</td></tr><tr><th>2530</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;not the version.&nbsp; This is used for finding as, ld, etc.&nbsp; */&nbsp;</td></tr><tr><th>2531</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; if (just_machine_suffix &amp;&amp; pl-&gt;require_machine_suffix == 2)&nbsp;</td></tr><tr><th>2532</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2533</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Some systems have a suffix for executable files.&nbsp;</td></tr><tr><th>2534</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;So try appending that first.&nbsp; */&nbsp;</td></tr><tr><th>2535</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file_suffix[0] != 0)&nbsp;</td></tr><tr><th>2536</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2537</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2538</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, just_machine_suffix);&nbsp;</td></tr><tr><th>2539</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, multilib_name);&nbsp;</td></tr><tr><th>2540</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, file_suffix);&nbsp;</td></tr><tr><th>2541</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2542</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2543</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2544</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2545</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2546</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, just_machine_suffix);&nbsp;</td></tr><tr><th>2547</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, multilib_name);&nbsp;</td></tr><tr><th>2548</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2549</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2550</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2551</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>2552</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; /* Certain prefixes can't be used without the machine suffix&nbsp;</td></tr><tr><th>2553</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;when the machine or version is explicitly specified.&nbsp; */&nbsp;</td></tr><tr><th>2554</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; if (! pl-&gt;require_machine_suffix)&nbsp;</td></tr><tr><th>2555</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2556</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Some systems have a suffix for executable files.&nbsp;</td></tr><tr><th>2557</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;So try appending that first.&nbsp; */&nbsp;</td></tr><tr><th>2558</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file_suffix[0] != 0)&nbsp;</td></tr><tr><th>2559</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>2560</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2561</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, this_name);&nbsp;</td></tr><tr><th>2562</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, file_suffix);&nbsp;</td></tr><tr><th>2563</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2564</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2565</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2661</th><td class="r">&nbsp; &nbsp; &nbsp; return NULL;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2662</th><td class="r">&nbsp; &nbsp; }&nbsp;</td></tr></tbody><tbody><tr><th>2566</th><th>2663</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2567</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (temp, pl-&gt;prefix);&nbsp;</td></tr><tr><th>2568</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcat (temp, this_name);&nbsp;</td></tr><tr><th>2569</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (access_check (temp, mode) == 0)&nbsp;</td></tr><tr><th>2570</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return temp;&nbsp;</td></tr><tr><th>2571</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>2572</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>2664</th><td class="r">&nbsp; info.name = name;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2665</th><td class="r">&nbsp; info.suffix = (mode &amp; X_OK) != 0 ? HOST_EXECUTABLE_SUFFIX : &#34;&#34;;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2666</th><td class="r">&nbsp; info.name_len = strlen (info.name);&nbsp;</td></tr><tr><th>&nbsp;</th><th>2667</th><td class="r">&nbsp; info.suffix_len = strlen (info.suffix);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2668</th><td class="r">&nbsp; info.mode = mode;&nbsp;</td></tr></tbody><tbody><tr><th>2573</th><th>2669</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2574</th><th>&nbsp;</th><td class="l">&nbsp; <del>free (temp);</del>&nbsp;</td></tr><tr><th>2575</th><th>&nbsp;</th><td class="l"><del>&nbsp; return 0</del>;&nbsp;</td></tr><tr><th>&nbsp;</th><th>2670</th><td class="r">&nbsp; <ins>return for_each_path (pprefix, do_multi, info.name_len + info.suffix_len,</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2671</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;file_at_path, &amp;info)</ins>;&nbsp;</td></tr></tbody><tbody><tr><th>2576</th><th>2672</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>2577</th><th>2673</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2578</th><th>2674</th><td class="l"><span>/* Ranking of prefixes in the sort list. -B prefixes are put before</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2691</th><th>2787</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2692</th><th>2788</th><td class="l"><span>&nbsp; commands[0].prog = argbuf[0]; /* first command.&nbsp; */</span>&nbsp;</td></tr><tr><th>2693</th><th>2789</th><td class="l"><span>&nbsp; commands[0].argv = &amp;argbuf[0];</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2694</th><th>&nbsp;</th><td class="l">&nbsp; string = find_a_file (&amp;exec_prefixes, commands[0].prog, X_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2790</th><td class="r">&nbsp; string = find_a_file (&amp;exec_prefixes, commands[0].prog, X_OK, <ins>false</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>2695</th><th>2791</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>2696</th><th>2792</th><td class="l"><span>&nbsp; if (string)</span>&nbsp;</td></tr><tr><th>2697</th><th>2793</th><td class="l"><span>&nbsp; &nbsp; commands[0].argv[0] = string;</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>2706</th><th>2802</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; commands[n_commands].prog = argbuf[i + 1];</span>&nbsp;</td></tr><tr><th>2707</th><th>2803</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; commands[n_commands].argv = &amp;argbuf[i + 1];</span>&nbsp;</td></tr><tr><th>2708</th><th>2804</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; string = find_a_file (&amp;exec_prefixes, commands[n_commands].prog,</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>2709</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; X_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>2805</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; X_OK, <ins>false</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>2710</th><th>2806</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if (string)</span>&nbsp;</td></tr><tr><th>2711</th><th>2807</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commands[n_commands].argv[0] = string;</span>&nbsp;</td></tr><tr><th>2712</th><th>2808</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; n_commands++;</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>3643</th><th>3739</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if appending a directory separator actually makes a</span>&nbsp;</td></tr><tr><th>3644</th><th>3740</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;valid directory name.&nbsp; */</span>&nbsp;</td></tr><tr><th>3645</th><th>3741</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (! IS_DIR_SEPARATOR (value [len - 1])</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>3646</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; is_directory (value, <del>&#34;&#34;, 0</del>))&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>3742</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; is_directory (value, <ins>false</ins>))&nbsp;</td></tr></tbody><tbody><tr><th>3647</th><th>3743</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>3648</th><th>3744</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char *tmp = xmalloc (len + 2);</span>&nbsp;</td></tr><tr><th>3649</th><th>3745</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (tmp, value);</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>4391</th><th>4487</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>4392</th><th>4488</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>4393</th><th>4489</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4394</th><th>&nbsp;</th><td class="l">void&nbsp;</td></tr><tr><th>4395</th><th>&nbsp;</th><td class="l">do_spec_path (struct prefix_list *pl, const char *option,&nbsp;</td></tr><tr><th>4396</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int omit_if_relative, int separate_options,&nbsp;</td></tr><tr><th>4397</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int only_subdir,&nbsp;</td></tr><tr><th>4398</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char *dir_for_machine_suffix,&nbsp;</td></tr><tr><th>4399</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char *dir_for_no_suffix)&nbsp;</td></tr><tr><th>4400</th><th>&nbsp;</th><td class="l">{&nbsp;</td></tr><tr><th>4401</th><th>&nbsp;</th><td class="l">&nbsp; static size_t bufsize = 0;&nbsp;</td></tr><tr><th>4402</th><th>&nbsp;</th><td class="l">&nbsp; static char *buffer;&nbsp;</td></tr><tr><th>4403</th><th>&nbsp;</th><td class="l">&nbsp; int idx;&nbsp;</td></tr><tr><th>4404</th><th>&nbsp;</th><td class="l">&nbsp; bool multilib_p = false;&nbsp;</td></tr><tr><th>4405</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>4406</th><th>&nbsp;</th><td class="l">&nbsp; /* Used on systems which record the specified -L dirs&nbsp;</td></tr><tr><th>4407</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp;and use them to search for dynamic linking.&nbsp; */&nbsp;</td></tr><tr><th>4408</th><th>&nbsp;</th><td class="l">&nbsp; /* Relative directories always come from -B,&nbsp;</td></tr><tr><th>4409</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp;and it is better not to use them for searching&nbsp;</td></tr><tr><th>4410</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp;at run time.&nbsp; In particular, stage1 loses.&nbsp; */&nbsp;</td></tr><tr><th>4411</th><th>&nbsp;</th><td class="l">&nbsp; if (omit_if_relative&nbsp;</td></tr><tr><th>4412</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &amp;&amp; !IS_ABSOLUTE_PATH (pl-&gt;prefix))&nbsp;</td></tr><tr><th>4413</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; return;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4490</th><td class="r">/* Callback for processing %D and %I specs.&nbsp; */&nbsp;</td></tr></tbody><tbody><tr><th>4414</th><th>4491</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4415</th><th>&nbsp;</th><td class="l">&nbsp; /* Try subdirectory if there is one.&nbsp; */&nbsp;</td></tr><tr><th>4416</th><th>&nbsp;</th><td class="l">&nbsp; if (machine_suffix &amp;&amp; dir_for_machine_suffix)&nbsp;</td></tr><tr><th>4417</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4418</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (strlen (pl-&gt;prefix) + strlen (machine_suffix)&nbsp;</td></tr><tr><th>4419</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;= bufsize)&nbsp;</td></tr><tr><th>4420</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; bufsize = (strlen (pl-&gt;prefix)&nbsp;</td></tr><tr><th>4421</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + strlen (machine_suffix)) * 2 + 1;&nbsp;</td></tr><tr><th>4422</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; buffer = xrealloc (buffer, bufsize);&nbsp;</td></tr><tr><th>4423</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; strcpy (buffer, pl-&gt;prefix);&nbsp;</td></tr><tr><th>4424</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; strcat (buffer, machine_suffix);&nbsp;</td></tr><tr><th>4425</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (is_directory (buffer, dir_for_machine_suffix, 1))&nbsp;</td></tr><tr><th>4426</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4427</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multilib_p = true;&nbsp;</td></tr><tr><th>4428</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (option, separate_options, NULL);&nbsp;</td></tr><tr><th>4429</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (separate_options)&nbsp;</td></tr><tr><th>4430</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4431</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (buffer, 1, NULL);&nbsp;</td></tr><tr><th>4432</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (dir_for_machine_suffix, 1, NULL);&nbsp;</td></tr><tr><th>4433</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Make this a separate argument.&nbsp; */&nbsp;</td></tr><tr><th>4434</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4435</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>4436</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; }&nbsp;</td></tr><tr><th>4437</th><th>&nbsp;</th><td class="l">&nbsp; if (!pl-&gt;require_machine_suffix &amp;&amp; dir_for_no_suffix)&nbsp;</td></tr><tr><th>&nbsp;</th><th>4492</th><td class="r">struct spec_path_info {&nbsp;</td></tr><tr><th>&nbsp;</th><th>4493</th><td class="r">&nbsp; const char *option;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4494</th><td class="r">&nbsp; const char *append;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4495</th><td class="r">&nbsp; size_t append_len;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4496</th><td class="r">&nbsp; bool omit_relative;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4497</th><td class="r">&nbsp; bool separate_options;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4498</th><td class="r">};&nbsp;</td></tr><tr><th>&nbsp;</th><th>4499</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>4500</th><td class="r">static void *&nbsp;</td></tr><tr><th>&nbsp;</th><th>4501</th><td class="r">spec_path (char *path, void *data)&nbsp;</td></tr><tr><th>&nbsp;</th><th>4502</th><td class="r">{&nbsp;</td></tr><tr><th>&nbsp;</th><th>4503</th><td class="r">&nbsp; struct spec_path_info *info = data;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4504</th><td class="r">&nbsp; size_t len = 0;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4505</th><td class="r">&nbsp; char save = 0;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4506</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>4507</th><td class="r">&nbsp; if (info-&gt;omit_relative &amp;&amp; !IS_ABSOLUTE_PATH (path))&nbsp;</td></tr><tr><th>&nbsp;</th><th>4508</th><td class="r">&nbsp; &nbsp; return NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4509</th><td class="r">&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4510</th><td class="r">&nbsp; if (info-&gt;append_len != 0)&nbsp;</td></tr></tbody><tbody><tr><th>4438</th><th>4511</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4439</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (is_directory (pl-&gt;prefix, dir_for_no_suffix, 1))&nbsp;</td></tr><tr><th>4440</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4441</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; multilib_p = true;&nbsp;</td></tr><tr><th>4442</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (option, separate_options, NULL);&nbsp;</td></tr><tr><th>4443</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (separate_options)&nbsp;</td></tr><tr><th>4444</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4445</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (pl-&gt;prefix, 1, NULL);&nbsp;</td></tr><tr><th>4446</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (dir_for_no_suffix, 1, NULL);&nbsp;</td></tr><tr><th>4447</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Make this a separate argument.&nbsp; */&nbsp;</td></tr><tr><th>4448</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4449</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>4512</th><td class="r">&nbsp; &nbsp; &nbsp; len = strlen (path);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4513</th><td class="r">&nbsp; &nbsp; &nbsp; memcpy (path + len, info-&gt;append, info-&gt;append_len + 1);&nbsp;</td></tr></tbody><tbody><tr><th>4450</th><th>4514</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>4451</th><th>4515</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4452</th><th>&nbsp;</th><td class="l">&nbsp; if (only_subdir || multilib_p)&nbsp;</td></tr><tr><th>4453</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; return;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4516</th><td class="r">&nbsp; if (!is_directory (path, true))&nbsp;</td></tr><tr><th>&nbsp;</th><th>4517</th><td class="r">&nbsp; &nbsp; return NULL;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4518</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>4519</th><td class="r">&nbsp; do_spec_1 (info-&gt;option, 1, NULL);&nbsp;</td></tr><tr><th>&nbsp;</th><th>4520</th><td class="r">&nbsp; if (info-&gt;separate_options)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4521</th><td class="r">&nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr></tbody><tbody><tr><th>4454</th><th>4522</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4455</th><th>&nbsp;</th><td class="l">&nbsp; if (<del>machine_suffix</del>)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4523</th><td class="r">&nbsp; if (<ins>info-&gt;append_len == 0</ins>)&nbsp;</td></tr></tbody><tbody><tr><th>4456</th><th>4524</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4457</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (is_directory (pl-&gt;prefix, machine_suffix, 1))&nbsp;</td></tr><tr><th>4458</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4459</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (option, separate_options, NULL);&nbsp;</td></tr><tr><th>4460</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (separate_options)&nbsp;</td></tr><tr><th>4461</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4462</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (pl-&gt;prefix, 1, NULL);&nbsp;</td></tr><tr><th>4463</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Remove slash from machine_suffix.&nbsp; */&nbsp;</td></tr><tr><th>4464</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (strlen (machine_suffix) &gt;= bufsize)&nbsp;</td></tr><tr><th>4465</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bufsize = strlen (machine_suffix) * 2 + 1;&nbsp;</td></tr><tr><th>4466</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; buffer = xrealloc (buffer, bufsize);&nbsp;</td></tr><tr><th>4467</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (buffer, machine_suffix);&nbsp;</td></tr><tr><th>4468</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; idx = strlen (buffer);&nbsp;</td></tr><tr><th>4469</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (IS_DIR_SEPARATOR (buffer[idx - 1]))&nbsp;</td></tr><tr><th>4470</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; buffer[idx - 1] = 0;&nbsp;</td></tr><tr><th>4471</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (buffer, 1, NULL);&nbsp;</td></tr><tr><th>4472</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Make this a separate argument.&nbsp; */&nbsp;</td></tr><tr><th>4473</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4474</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>4475</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; }&nbsp;</td></tr><tr><th>4476</th><th>&nbsp;</th><td class="l">&nbsp; if (!pl-&gt;require_machine_suffix)&nbsp;</td></tr><tr><th>4477</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4478</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (is_directory (pl-&gt;prefix, &#34;&#34;, 1))&nbsp;</td></tr><tr><th>4479</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4480</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (option, separate_options, NULL);&nbsp;</td></tr><tr><th>4481</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (separate_options)&nbsp;</td></tr><tr><th>4482</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4483</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Remove slash from pl-&gt;prefix.&nbsp; */&nbsp;</td></tr><tr><th>4484</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (strlen (pl-&gt;prefix) &gt;= bufsize)&nbsp;</td></tr><tr><th>4485</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bufsize = strlen (pl-&gt;prefix) * 2 + 1;&nbsp;</td></tr><tr><th>4486</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; buffer = xrealloc (buffer, bufsize);&nbsp;</td></tr><tr><th>4487</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; strcpy (buffer, pl-&gt;prefix);&nbsp;</td></tr><tr><th>4488</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; idx = strlen (buffer);&nbsp;</td></tr><tr><th>4489</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (IS_DIR_SEPARATOR (buffer[idx - 1]))&nbsp;</td></tr><tr><th>4490</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; buffer[idx - 1] = 0;&nbsp;</td></tr><tr><th>4491</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (buffer, 1, NULL);&nbsp;</td></tr><tr><th>4492</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Make this a separate argument.&nbsp; */&nbsp;</td></tr><tr><th>4493</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);&nbsp;</td></tr><tr><th>4494</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>4525</th><td class="r">&nbsp; &nbsp; &nbsp; len = strlen (path);&nbsp;</td></tr><tr><th>&nbsp;</th><th>4526</th><td class="r">&nbsp; &nbsp; &nbsp; save = path[len - 1];&nbsp;</td></tr><tr><th>&nbsp;</th><th>4527</th><td class="r">&nbsp; &nbsp; &nbsp; if (IS_DIR_SEPARATOR (path[len - 1]))&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4528</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; path[len - 1] = '\0';&nbsp;</td></tr></tbody><tbody><tr><th>4495</th><th>4529</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first"><th>&nbsp;</th><th>4530</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4531</th><td class="r"><ins>&nbsp; do_spec_1 (path, 1, NULL);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4532</th><td class="r"><ins>&nbsp; do_spec_1 (&#34; &#34;, 0, NULL);</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4533</th><td class="r"><ins></ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4534</th><td class="r"><ins>&nbsp; /* Must not damage the original path.&nbsp; */</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4535</th><td class="r"><ins>&nbsp; if (info-&gt;append_len == 0)</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4536</th><td class="r"><ins>&nbsp; &nbsp; path[len - 1] = save;</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>4537</th><td class="r"><ins></ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4538</th><td class="r"><ins>&nbsp; return NULL;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>4496</th><th>4539</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>4497</th><th>4540</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>4498</th><th>4541</th><td class="l"><span>/* Process the sub-spec SPEC as a portion of a larger spec.</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>4630</th><th>4673</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;that we search for startfiles.&nbsp; */</span>&nbsp;</td></tr><tr><th>4631</th><th>4674</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'D':</span>&nbsp;</td></tr><tr><th>4632</th><th>4675</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4633</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct prefix_list *pl = startfile_prefixes.plist;&nbsp;</td></tr><tr><th>4634</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>4635</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (; pl; pl = pl-&gt;next)&nbsp;</td></tr><tr><th>4636</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</td></tr><tr><th>4637</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char *no_suffix_multilib_dir;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4676</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct spec_path_info info;&nbsp;</td></tr></tbody><tbody><tr><th>4638</th><th>4677</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4639</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; no_suffix_multilib_dir = pl-&gt;os_multilib ? multilib_os_dir&nbsp;</td></tr><tr><th>4640</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: multilib_dir;&nbsp;</td></tr><tr><th>4641</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Do not separate options, include non-multilibbed variant.&nbsp; */&nbsp;</td></tr><tr><th>4642</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_path (pl, &#34;-L&#34;,&nbsp;</td></tr><tr><th>&nbsp;</th><th>4678</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.option = &#34;-L&#34;;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4679</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.append_len = 0;&nbsp;</td></tr></tbody><tbody><tr><th>4643</th><th>4680</th><td class="l"><span>#ifdef RELATIVE_PREFIX_NOT_LINKDIR</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4644</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1,&nbsp;</td></tr><tr><th>&nbsp;</th><th>4681</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Used on systems which record the specified -L dirs&nbsp;</td></tr><tr><th>&nbsp;</th><th>4682</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and use them to search for dynamic linking.&nbsp;</td></tr><tr><th>&nbsp;</th><th>4683</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Relative directories always come from -B,&nbsp;</td></tr><tr><th>&nbsp;</th><th>4684</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and it is better not to use them for searching&nbsp;</td></tr><tr><th>&nbsp;</th><th>4685</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;at run time.&nbsp; In particular, stage1 loses.&nbsp; */&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4686</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.omit_relative = true;&nbsp;</td></tr></tbody><tbody><tr><th>4645</th><th>4687</th><td class="l"><span>#else</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4646</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; <del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0,</del>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4688</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; <ins>&nbsp; &nbsp; &nbsp; info.omit_relative = false;</ins>&nbsp;</td></tr></tbody><tbody><tr><th>4647</th><th>4689</th><td class="l"><span>#endif</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4648</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0, 0, multilib_dir, no_suffix_multilib_dir);&nbsp;</td></tr><tr><th>4649</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;</td></tr><tr><th>&nbsp;</th><th>4690</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.separate_options = false;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4691</th><td class="r">&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4692</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for_each_path (&amp;startfile_prefixes, true, 0, spec_path, &amp;info);&nbsp;</td></tr></tbody><tbody><tr><th>4650</th><th>4693</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>4651</th><th>4694</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span>&nbsp;</td></tr><tr><th>4652</th><th>4695</th><td class="l"><span></span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>4883</th><th>4926</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>4884</th><th>4927</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 'I':</span>&nbsp;</td></tr><tr><th>4885</th><th>4928</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4886</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct <del>prefix_list *pl = include_prefixes.plist</del>;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4929</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct <ins>spec_path_info info</ins>;&nbsp;</td></tr></tbody><tbody><tr><th>4887</th><th>4930</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>4888</th><th>4931</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (gcc_exec_prefix)</span>&nbsp;</td></tr><tr><th>4889</th><th>4932</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>4906</th><th>4949</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_1 (&#34; &#34;, 0, NULL);</span>&nbsp;</td></tr><tr><th>4907</th><th>4950</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>4908</th><th>4951</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>4909</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (; pl; pl = pl-&gt;next)&nbsp;</td></tr><tr><th>4910</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Separate options, don't include non-suffixed variant.&nbsp; */&nbsp;</td></tr><tr><th>4911</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do_spec_path (pl, &#34;-isystem&#34;, 0, 1, 1, &#34;include&#34;, &#34;include&#34;);&nbsp;</td></tr><tr><th>&nbsp;</th><th>4952</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.option = &#34;-isystem&#34;;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4953</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.append = &#34;include&#34;;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4954</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.append_len = strlen (info.append);&nbsp;</td></tr><tr><th>&nbsp;</th><th>4955</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.omit_relative = false;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4956</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info.separate_options = true;&nbsp;</td></tr><tr><th>&nbsp;</th><th>4957</th><td class="r">&nbsp;</td></tr><tr><th>&nbsp;</th><th>4958</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for_each_path (&amp;include_prefixes, false, info.append_len,&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>4959</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;spec_path, &amp;info);&nbsp;</td></tr></tbody><tbody><tr><th>4912</th><th>4960</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>4913</th><th>4961</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span>&nbsp;</td></tr><tr><th>4914</th><th>4962</th><td class="l"><span></span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>5894</th><th>5942</th><td class="l"><span>static const char *</span>&nbsp;</td></tr><tr><th>5895</th><th>5943</th><td class="l"><span>find_file (const char *name)</span>&nbsp;</td></tr><tr><th>5896</th><th>5944</th><td class="l"><span>{</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5897</th><th>&nbsp;</th><td class="l">&nbsp; char *newname;&nbsp;</td></tr><tr><th>5898</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>5899</th><th>&nbsp;</th><td class="l">&nbsp; /* Try multilib_dir if it is defined.&nbsp; */&nbsp;</td></tr><tr><th>5900</th><th>&nbsp;</th><td class="l">&nbsp; if (multilib_os_dir != NULL)&nbsp;</td></tr><tr><th>5901</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; {&nbsp;</td></tr><tr><th>5902</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; newname = find_a_file (&amp;startfile_prefixes, name, R_OK, 1);&nbsp;</td></tr><tr><th>5903</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>5904</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; /* If we don't find it in the multi library dir, then fall&nbsp;</td></tr><tr><th>5905</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;through and look for it in the normal places.&nbsp; */&nbsp;</td></tr><tr><th>5906</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; if (newname != NULL)&nbsp;</td></tr><tr><th>5907</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; return newname;&nbsp;</td></tr><tr><th>5908</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; }&nbsp;</td></tr><tr><th>5909</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>5910</th><th>&nbsp;</th><td class="l">&nbsp; newname = find_a_file (&amp;startfile_prefixes, name, R_OK, 0);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5945</th><td class="r">&nbsp; char *newname = find_a_file (&amp;startfile_prefixes, name, R_OK, true);&nbsp;</td></tr></tbody><tbody><tr><th>5911</th><th>5946</th><td class="l"><span>&nbsp; return newname ? newname : name;</span>&nbsp;</td></tr><tr><th>5912</th><th>5947</th><td class="l"><span>}</span>&nbsp;</td></tr><tr><th>5913</th><th>5948</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>5914</th><th>5949</th><td class="l"><span>/* Determine whether a directory exists.&nbsp; If LINKER, return 0 for</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5915</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;certain fixed names not needed by the linker.&nbsp; If not LINKER, it is&nbsp;</td></tr><tr><th>5916</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;only important to return 0 if the host machine has a small ARG_MAX&nbsp;</td></tr><tr><th>5917</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp;limit.&nbsp; */&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5950</th><td class="r">&nbsp; &nbsp;certain fixed names not needed by the linker.&nbsp; */&nbsp;</td></tr></tbody><tbody><tr><th>5918</th><th>5951</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>5919</th><th>5952</th><td class="l"><span>static int</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5920</th><th>&nbsp;</th><td class="l">is_directory (const char *path1, <del>const char *path2, int</del> linker)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5953</th><td class="r">is_directory (const char *path1, <ins>bool</ins> linker)&nbsp;</td></tr></tbody><tbody><tr><th>5921</th><th>5954</th><td class="l"><span>{</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5922</th><th>&nbsp;</th><td class="l">&nbsp; int len1 = strlen (path1);&nbsp;</td></tr><tr><th>5923</th><th>&nbsp;</th><td class="l">&nbsp; int len2 = strlen (path2);&nbsp;</td></tr><tr><th>5924</th><th>&nbsp;</th><td class="l">&nbsp; char *path = alloca (3 + len1 + len2);&nbsp;</td></tr><tr><th>&nbsp;</th><th>5955</th><td class="r">&nbsp; int len1;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5956</th><td class="r">&nbsp; char *path;&nbsp;</td></tr></tbody><tbody><tr><th>5925</th><th>5957</th><td class="l"><span>&nbsp; char *cp;</span>&nbsp;</td></tr><tr><th>5926</th><th>5958</th><td class="l"><span>&nbsp; struct stat st;</span>&nbsp;</td></tr><tr><th>5927</th><th>5959</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5928</th><th>&nbsp;</th><td class="l">#ifndef SMALL_ARG_MAX&nbsp;</td></tr><tr><th>5929</th><th>&nbsp;</th><td class="l">&nbsp; if (! linker)&nbsp;</td></tr><tr><th>5930</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; return 1;&nbsp;</td></tr><tr><th>5931</th><th>&nbsp;</th><td class="l">#endif&nbsp;</td></tr><tr><th>5932</th><th>&nbsp;</th><td class="l">&nbsp;</td></tr><tr><th>5933</th><th>&nbsp;</th><td class="l">&nbsp; /* Construct the path from the two parts.&nbsp; Ensure the string ends with &#34;/.&#34;.&nbsp;</td></tr><tr><th>5934</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp;The resulting path will be a directory even if the given path is a&nbsp;</td></tr><tr><th>5935</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp;symbolic link.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>5960</th><td class="r">&nbsp; /* Ensure the string ends with &#34;/.&#34;.&nbsp; The resulting path will be a&nbsp;</td></tr><tr><th>&nbsp;</th><th>5961</th><td class="r">&nbsp; &nbsp; &nbsp;directory even if the given path is a symbolic link.&nbsp; */&nbsp;</td></tr><tr><th>&nbsp;</th><th>5962</th><td class="r">&nbsp; len1 = strlen (path1);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5963</th><td class="r">&nbsp; path = alloca (3 + len1);&nbsp;</td></tr></tbody><tbody><tr><th>5936</th><th>5964</th><td class="l"><span>&nbsp; memcpy (path, path1, len1);</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5937</th><th>&nbsp;</th><td class="l">&nbsp; memcpy (path + len1, path2, len2);&nbsp;</td></tr><tr><th>5938</th><th>&nbsp;</th><td class="l">&nbsp; cp = path + len1 + len2;&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5965</th><td class="r">&nbsp; cp = path + len1;&nbsp;</td></tr></tbody><tbody><tr><th>5939</th><th>5966</th><td class="l"><span>&nbsp; if (!IS_DIR_SEPARATOR (cp[-1]))</span>&nbsp;</td></tr><tr><th>5940</th><th>5967</th><td class="l"><span>&nbsp; &nbsp; *cp++ = DIR_SEPARATOR;</span>&nbsp;</td></tr><tr><th>5941</th><th>5968</th><td class="l"><span>&nbsp; *cp++ = '.';</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>5943</th><th>5970</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>5944</th><th>5971</th><td class="l"><span>&nbsp; /* Exclude directories that the linker is known to search.&nbsp; */</span>&nbsp;</td></tr><tr><th>5945</th><th>5972</th><td class="l"><span>&nbsp; if (linker</span>&nbsp;</td></tr></tbody><tbody class="add"><tr class="first last"><th>&nbsp;</th><th>5973</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &amp;&amp; IS_DIR_SEPARATOR (path[0])</ins>&nbsp;</td></tr></tbody><tbody><tr><th>5946</th><th>5974</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &amp;&amp; ((cp - path == 6</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5947</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;&amp; strcmp (path, concat (dir_separator_str, &#34;lib&#34;,&nbsp;</td></tr><tr><th>5948</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dir_separator_str, &#34;.&#34;, NULL)) == 0)&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5975</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;&amp; strncmp (path + 1, &#34;lib&#34;, 3) == 0)&nbsp;</td></tr></tbody><tbody><tr><th>5949</th><th>5976</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || (cp - path == 10</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>5950</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; str<del>cmp (path, concat (dir_separator_str, &#34;usr&#34;,</del>&nbsp;</td></tr><tr><th>5951</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; <del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dir_separator_str, &#34;lib&#34;,</del>&nbsp;</td></tr><tr><th>5952</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; <del>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dir_separator_str, &#34;.&#34;, NULL)</del>) == 0)))&nbsp;</td></tr><tr><th>&nbsp;</th><th>5977</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; str<ins>ncmp (path + 1, &#34;usr&#34;, 3) == 0</ins>&nbsp;</td></tr><tr><th>&nbsp;</th><th>5978</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; <ins>&nbsp; &nbsp; &nbsp; &amp;&amp; IS_DIR_SEPARATOR (path[4])</ins>&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>5979</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; <ins>&nbsp; &nbsp; &nbsp; &amp;&amp; strncmp (path + 5, &#34;lib&#34;, 3</ins>) == 0)))&nbsp;</td></tr></tbody><tbody><tr><th>5953</th><th>5980</th><td class="l"><span>&nbsp; &nbsp; return 0;</span>&nbsp;</td></tr><tr><th>5954</th><th>5981</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>5955</th><th>5982</th><td class="l"><span>&nbsp; return (stat (path, &amp;st) &gt;= 0 &amp;&amp; S_ISDIR (st.st_mode));</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>6139</th><th>6166</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;spec_version, dir_separator_str, NULL);</span>&nbsp;</td></tr><tr><th>6140</th><th>6167</th><td class="l"><span>&nbsp; just_machine_suffix = concat (spec_machine, dir_separator_str, NULL);</span>&nbsp;</td></tr><tr><th>6141</th><th>6168</th><td class="l"><span></span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>6142</th><th>&nbsp;</th><td class="l">&nbsp; specs_file = find_a_file (&amp;startfile_prefixes, &#34;specs&#34;, R_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6169</th><td class="r">&nbsp; specs_file = find_a_file (&amp;startfile_prefixes, &#34;specs&#34;, R_OK, <ins>true</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>6143</th><th>6170</th><td class="l"><span>&nbsp; /* Read the specs file unless it is a default one.&nbsp; */</span>&nbsp;</td></tr><tr><th>6144</th><th>6171</th><td class="l"><span>&nbsp; if (specs_file != 0 &amp;&amp; strcmp (specs_file, &#34;specs&#34;))</span>&nbsp;</td></tr><tr><th>6145</th><th>6172</th><td class="l"><span>&nbsp; &nbsp; read_specs (specs_file, TRUE);</span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>6275</th><th>6302</th><td class="l"><span>&nbsp; for (uptr = user_specs_head; uptr; uptr = uptr-&gt;next)</span>&nbsp;</td></tr><tr><th>6276</th><th>6303</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>6277</th><th>6304</th><td class="l"><span>&nbsp; &nbsp; &nbsp; char *filename = find_a_file (&amp;startfile_prefixes, uptr-&gt;filename,</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>6278</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; R_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6305</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; R_OK, <ins>true</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>6279</th><th>6306</th><td class="l"><span>&nbsp; &nbsp; &nbsp; read_specs (filename ? filename : uptr-&gt;filename, FALSE);</span>&nbsp;</td></tr><tr><th>6280</th><th>6307</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>6281</th><th>6308</th><td class="l"><span></span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>6304</th><th>6331</th><td class="l"><span>&nbsp; if (print_search_dirs)</span>&nbsp;</td></tr><tr><th>6305</th><th>6332</th><td class="l"><span>&nbsp; &nbsp; {</span>&nbsp;</td></tr><tr><th>6306</th><th>6333</th><td class="l"><span>&nbsp; &nbsp; &nbsp; printf (_(&#34;install: %s%s\n&#34;), standard_exec_prefix, machine_suffix);</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>6307</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; printf (_(&#34;programs: %s\n&#34;), build_search_list (&amp;exec_prefixes, &#34;&#34;, 0));&nbsp;</td></tr><tr><th>6308</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; printf (_(&#34;libraries: %s\n&#34;), build_search_list (&amp;startfile_prefixes, &#34;&#34;, 0));&nbsp;</td></tr><tr><th>&nbsp;</th><th>6334</th><td class="r">&nbsp; &nbsp; &nbsp; printf (_(&#34;programs: %s\n&#34;),&nbsp;</td></tr><tr><th>&nbsp;</th><th>6335</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; build_search_list (&amp;exec_prefixes, &#34;&#34;, false, false));&nbsp;</td></tr><tr><th>&nbsp;</th><th>6336</th><td class="r">&nbsp; &nbsp; &nbsp; printf (_(&#34;libraries: %s\n&#34;),&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6337</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; build_search_list (&amp;startfile_prefixes, &#34;&#34;, false, true));&nbsp;</td></tr></tbody><tbody><tr><th>6309</th><th>6338</th><td class="l"><span>&nbsp; &nbsp; &nbsp; return (0);</span>&nbsp;</td></tr><tr><th>6310</th><th>6339</th><td class="l"><span>&nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>6311</th><th>6340</th><td class="l"><span></span>&nbsp;</td></tr></tbody>
     <tbody class="skipped">
      <tr><th>&hellip;</th><th>&hellip;</th><td>&nbsp;</td></tr>
     </tbody><tbody><tr><th>6622</th><th>6651</th><td class="l"><span>&nbsp; &nbsp; &nbsp; /* We'll use ld if we can't find collect2.&nbsp; */</span>&nbsp;</td></tr><tr><th>6623</th><th>6652</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (! strcmp (linker_name_spec, &#34;collect2&#34;))</span>&nbsp;</td></tr><tr><th>6624</th><th>6653</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; {</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>6625</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char *s = find_a_file (&amp;exec_prefixes, &#34;collect2&#34;, X_OK, <del>0</del>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6654</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char *s = find_a_file (&amp;exec_prefixes, &#34;collect2&#34;, X_OK, <ins>false</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>6626</th><th>6655</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (s == NULL)</span>&nbsp;</td></tr><tr><th>6627</th><th>6656</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; linker_name_spec = &#34;ld&#34;;</span>&nbsp;</td></tr><tr><th>6628</th><th>6657</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; }</span>&nbsp;</td></tr><tr><th>6629</th><th>6658</th><td class="l"><span>&nbsp; &nbsp; &nbsp; /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables</span>&nbsp;</td></tr><tr><th>6630</th><th>6659</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for collect.&nbsp; */</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>6631</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; putenv_from_prefixes (&amp;exec_prefixes, &#34;COMPILER_PATH&#34;<del></del>);&nbsp;</td></tr><tr><th>6632</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; putenv_from_prefixes (&amp;startfile_prefixes, LIBRARY_PATH_ENV<del></del>);&nbsp;</td></tr><tr><th>&nbsp;</th><th>6660</th><td class="r">&nbsp; &nbsp; &nbsp; putenv_from_prefixes (&amp;exec_prefixes, &#34;COMPILER_PATH&#34;<ins>, false</ins>);&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>6661</th><td class="r">&nbsp; &nbsp; &nbsp; putenv_from_prefixes (&amp;startfile_prefixes, LIBRARY_PATH_ENV<ins>, true</ins>);&nbsp;</td></tr></tbody><tbody><tr><th>6633</th><th>6662</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>6634</th><th>6663</th><td class="l"><span>&nbsp; &nbsp; &nbsp; value = do_spec (link_command_spec);</span>&nbsp;</td></tr><tr><th>6635</th><th>6664</th><td class="l"><span>&nbsp; &nbsp; &nbsp; if (value &lt; 0)</span>&nbsp;</td></tr></tbody>
  </table>
 </li><li class="entry">
  <h2>gcc-4.1.0/gcc/system.h</h2>
  <table class="inline" summary="Differences" cellspacing="0">
   <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
   <thead><tr>
    <th>old</th>
    <th>new</th>
    <th>&nbsp;</th>
   </tr></thead><tbody><tr><th>728</th><th>728</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; TARGET_ESC TARGET_FF TARGET_NEWLINE TARGET_TAB TARGET_VT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\</span>&nbsp;</td></tr><tr><th>729</th><th>729</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; LINK_LIBGCC_SPECIAL DONT_ACCESS_GBLS_AFTER_EPILOGUE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \</span>&nbsp;</td></tr><tr><th>730</th><th>730</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; TARGET_OPTIONS TARGET_SWITCHES EXTRA_CC_MODES FINALIZE_PIC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\</span>&nbsp;</td></tr></tbody><tbody class="mod"><tr class="first"><th>731</th><th>&nbsp;</th><td class="l">&nbsp; &nbsp; &nbsp; &nbsp; PREDICATE_CODES SPECIAL_MODE_PREDICATES HOST_PTR_PRINTF&nbsp;</td></tr><tr><th>&nbsp;</th><th>731</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; PREDICATE_CODES SPECIAL_MODE_PREDICATES HOST_PTR_PRINTF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \&nbsp;</td></tr><tr class="last"><th>&nbsp;</th><th>732</th><td class="r">&nbsp; &nbsp; &nbsp; &nbsp; SMALL_ARG_MAX&nbsp;</td></tr></tbody><tbody><tr><th>732</th><th>733</th><td class="l"><span></span>&nbsp;</td></tr><tr><th>733</th><th>734</th><td class="l"><span>/* Hooks that are no longer used.&nbsp; */</span>&nbsp;</td></tr><tr><th>734</th><th>735</th><td class="l"><span>&nbsp;#pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE&nbsp; &nbsp;\</span>&nbsp;</td></tr></tbody>
  </table>
 </li>
</ul></div>

  </div>

 <div id="help">
  <strong>Note:</strong> See <a href="/wiki/TracBrowser">TracBrowser</a> for help on using the browser.
 </div>

  <div id="anydiff">
   <form action="/anydiff" method="get">
    <div class="buttons">
     <input type="hidden" name="new_path" value="/trunk/patches/gcc-4.1.2-PR20425-1.patch" />
     <input type="hidden" name="old_path" value="/trunk/patches/gcc-4.1.2-PR20425-1.patch" />
     <input type="hidden" name="new_rev" value="" />
     <input type="hidden" name="old_rev" value="" />
     <input type="submit" value="View changes..." title="Prepare an Arbitrary Diff" />
    </div>
   </form>
  </div>

</div>
</div>
<script type="text/javascript">searchHighlight()</script>
<div id="altlinks"><h3>Download in other formats:</h3><ul><li class="first"><a href="/browser/trunk/patches/gcc-4.1.2-PR20425-1.patch?format=txt">Plain Text</a></li><li class="last"><a href="/browser/trunk/patches/gcc-4.1.2-PR20425-1.patch?format=raw">Original Format</a></li></ul></div>

</div>

<div id="footer">
 <hr />
 <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/chrome/common/trac_logo_mini.png" height="30" width="107"
   alt="Trac Powered"/></a>
 <p class="left">
  Powered by <a href="/about"><strong>Trac 0.10.3</strong></a><br />
  By <a href="http://www.edgewall.org/">Edgewall Software</a>.
 </p>
 <p class="right">
  
 </p>
</div>



 </body>
</html>

